
import java.util.*;



class SingleNode {
    static private int numberOfNodes = 0;
    public Object value;
    public SingleNode next;

    // -------------------------------Constructors---------------------------------
    public SingleNode(Object value) {
        this.value = value;
        this.next = null;
        numberOfNodes++;
    }

    public SingleNode(Object value, SingleNode next) {
        this.value = value;
        this.next = next;
        numberOfNodes++;
    }

    public SingleNode() {
    }
    // -------------------------------endConstructors-------------------------------

    // -------------------------------setterAndGetters------------------------------

    public Object getValue() {
        return value;
    }

    public void setValue(Object value) {
        this.value = value;
    }

    public SingleNode getNext() {
        return next;
    }

    public void setNext(SingleNode next) {
        this.next = next;
    }
    // -----------------------------endSetterAndGetters-------------------------------

    static int getNumOfNodes() {
        return numberOfNodes;
    }

}

class SingleLinkedList {

    public SingleNode head;
    public SingleNode tail;
    public int size;

    // constructors
    public SingleLinkedList() {
        this.head = null;
        this.tail = null;
        this.size = 0;
    }

    public SingleLinkedList(SingleNode head) {
        this.head = head;
        this.tail = head;
        this.size++;
    }

    public void addAtEnd(Object value) {
        SingleNode newNode = new SingleNode(value);
        if (this.tail == null) {
            this.head = newNode;
            this.tail = newNode;
        } else {
            this.tail.setNext(newNode);
            this.tail = newNode;
        }
        size++;
    }

    
    public void add(int index, Object element) {
        if (head == null) {
            if (index != 0) {
                System.out.println("Error");
                System.exit(0);
            } else {
                this.add(element);
                return;
            }
        }
        if (index == 0) {
            this.add(element);
            return;
        } else if (index == size) {
            this.addAtEnd(element);
            return;
        }
        SingleNode temp = head;
        if (index <= size - 1 && index >= 0) {
            temp = this.head;
            for (int i = 0; i < index - 1; i++) {
                temp = temp.getNext();
            }
        } else {
            System.out.println("Error");
            System.exit(0);
        }
        SingleNode newNode = new SingleNode(element);
        newNode.setNext(temp.getNext());
        temp.setNext(newNode);
        size++;
    }

    
    public void add(Object element) {
        SingleNode newNode = new SingleNode(element);
        newNode.setNext(this.head);
        if (head == null) {
            this.head = newNode;
            this.tail = newNode;
        } else {
            this.head = newNode;
        }
        size++;
    }


    public Object get(int index) {
        if (index < 0 || index >= size) {
            System.out.println("Error");
            System.exit(0);
        }
        SingleNode temp = head;
        for (int i = 0; i < index; i++) {
            temp = temp.getNext();
        }
        return temp.getValue();
    }

    
    public void set(int index, Object element) {

        if (index < 0 || index >= size) {
            System.out.println("Error");
            System.exit(0);
        }
        SingleNode temp = head;
        for (int i = 0; i < index; i++) {
            temp = temp.getNext();
        }
        temp.setValue(element);
    }

    
    public void clear() {
        this.head = null;
        this.tail = null;
        this.size = 0;
    }


    public boolean isEmpty() {
        return this.size == 0;
    }

    public void remove() {
        if (this.head != null) {
            SingleNode temp = this.head;
            this.head = this.head.getNext();
            temp.setNext(null);
            temp = null;
            size--;
        }
    }

    
    public void remove(int index) {
        if (this.head == null) {
            System.out.println("Error");
            System.exit(0);
        }
        if (index == 0) {
            this.remove();
            return;
        }
        SingleNode temp = head;
        if (index <= size - 1 && index >= 0) {
            temp = this.head;
            for (int i = 0; i < index - 1; i++) {
                temp = temp.getNext();
            }
        } else {
            System.out.println("ErrorF");
            System.exit(0);
        }
        SingleNode temp2 = temp.getNext();
        temp.setNext(temp2.getNext());
        temp2.setNext(null);
        temp2 = null;
        size--;
    }

    
    public int size() {
        return size;
    }

    
    public SingleLinkedList sublist(int fromIndex, int toIndex) {
        if (fromIndex < 0 || toIndex >= size || fromIndex > toIndex) {
            System.out.println("Error");
            System.exit(0);
        }
        SingleNode temp = this.head;
        SingleNode temp2 = this.head;
        for (int i = 0; i < fromIndex; i++) {
            temp = temp.getNext();
        }
        for (int i = 0; i < toIndex + 1; i++) {
            temp2 = temp2.getNext();
        }
        SingleLinkedList newList = new SingleLinkedList();

        while(temp != temp2)
        {
            newList.addAtEnd(temp.getValue()) ;
            temp = temp.getNext() ;
        }
        return newList ;
    }

    
    public boolean contains(Object o) {
        SingleNode temp = head;
        while (temp != null) {
            if (temp.getValue() == o)
                return true;
            temp = temp.getNext();
        }
        return false;
    }

    public void print() {
        if (this.isEmpty()) {
            System.out.println("[]");
            return;
        }
        SingleNode temp = head;
        System.out.print("[");
        while (temp.getNext() != null) {
            System.out.print(temp.getValue() + ", ");
            temp = temp.getNext();
        }
        System.out.print(temp.getValue() + "]");
        System.out.println();
    }

    public void take() {
        Scanner input = new Scanner(System.in) ;
        
        String str = input.nextLine().replaceAll("\\[|\\]", "");
        input.close();
        if(str.compareTo("") == 0)
        {
            this.clear();
            return;
        }
        //input.close() ;
        String[] str_array = str.split(", ") ;
        this.clear();
        for (String s : str_array) {
            this.addAtEnd(Integer.parseInt(s));
        }
    }

public int[] toArray() {
    int[] array = new int[this.size];
    SingleNode temp = head;

    for(int i = 0; i < array.length; i++)
    {
        array[i] = (Integer)temp.getValue();
        temp = temp.getNext();
    }
    return array;
}

}

public class PolynomialSolver{
    
    static SingleLinkedList[] array = new SingleLinkedList[4];
    
    
    public static void setPolynomial(char poly, int[] terms) {
        array[(int)(poly - 'A')] = new SingleLinkedList() ;
        SingleLinkedList list = array[(int)(poly - 'A')] ;
        for (int i = 0; i < terms.length; i++) {
            list.add(Integer.valueOf(terms[i]));
        }
    }
    
    public static String print_poly(char poly) {
        //display ----> x^3-9x^2+26x-24
        // input ----> -24 , 26 , -9 , 1
        // 0 , 1 , 0 , 2 , 10
        SingleLinkedList list = array[(int)(poly - 'A')] ;
        

        String str = new String() ;
        SingleNode temp = list.head ;
        boolean non_zero = false ;

        for (int i = 0 ; i < list.size ; i++) {

            if((Integer)temp.getValue() == 0) { 
                temp = temp.next ;
                continue ;
            }
            non_zero = true ;
            if(i == 1) { // x^1

                if((Integer)temp.value < 0) {
                    str = ((temp.value) + "x") + str ;
                }else {
                    str = ("+" + (temp.value) + "x") + str ;
                }

            }else {

                if((Integer)temp.value < 0) {
                    str = ((temp.value) + "x^" + (i)) + str ;
                }else {
                    str = ("+" + (temp.value) + "x^" + (i)) + str ;
                }

            }
            temp = temp.next;
        }
        if(!non_zero) {
            return "[]" ;
        }
        str = str.replaceAll("x\\^0", "") ;
        str = str.replaceAll("\\+1x", "+x") ;
        //str = str.replaceAll("\\-1x", "-x") ;
        // handle first element
        if(str.charAt(0) == '+') {
            str = str.replaceFirst("\\+" , "") ;
        }
              
        return str ;
    }
    
    public static void clearPolynomial(char poly) {
        SingleLinkedList list = array[(int)(poly - 'A')];
        list.clear();
    }

    public static int evaluatePolynomial(char poly, float value) {
        SingleLinkedList list = array[(int)(poly - 'A')];
        SingleNode temp = list.head;
        int eval = 0 ;

        for(int i = 0 ; i < list.size(); i++) {
            eval += (Integer)temp.getValue() * Math.pow(value, i);
            temp = temp.getNext();
        }
        return eval;
    }

    public static int[] add(char poly1, char poly2) {
        
        SingleLinkedList list1 = array[(int)(poly1 - 'A')] ;
        SingleLinkedList list2 = array[(int)(poly2 - 'A')] ;
        array[3] = new SingleLinkedList();
        SingleLinkedList result = array[3];
        SingleNode temp1 = list1.head ;
        SingleNode temp2 = list2.head ;

        while(temp1 != null && temp2 != null)
        {
            result.addAtEnd((Integer)temp1.getValue() + (Integer)temp2.getValue());
            temp1 = temp1.getNext();
            temp2 = temp2.getNext();
        }
        while(temp2 != null)
        {
            result.addAtEnd((Integer)temp2.getValue());
            temp2 = temp2.getNext();
        }
        while(temp1 != null)
        {
            result.addAtEnd((Integer)temp1.getValue());
            temp1 = temp1.getNext();
        }
        return result.toArray();
    }
 
    public static int[] subtract(char poly1, char poly2) {
                
        SingleLinkedList list1 = array[(int)(poly1 - 'A')];
        SingleLinkedList list2 = array[(int)(poly2 - 'A')]; 
        array[3] = new SingleLinkedList();
        SingleLinkedList result = array[3];
        SingleNode temp1 = list1.head;
        SingleNode temp2 = list2.head;

        while(temp1 != null && temp2 != null)
        {
            result.addAtEnd((Integer)temp1.getValue() - (Integer)temp2.getValue());
            temp1 = temp1.getNext();
            temp2 = temp2.getNext();
        }
        while(temp2 != null)
        {
            result.addAtEnd(-(Integer)temp2.getValue());
            temp2 = temp2.getNext();
        }
        while(temp1 != null)
        {
            result.addAtEnd((Integer)temp1.getValue());
            temp1 = temp1.getNext();
        }
        return result.toArray() ;
    }

    public static int[] multiply(char poly1, char poly2) {

        int[] list1 = array[(int)(poly1 - 'A')].toArray() ;
        int[] list2 = array[(int)(poly2 - 'A')].toArray() ;
        int[] resultarray = new int[list1.length + list2.length - 1] ;

        for (int i = 0 ; i < list1.length ; i++) {
            for (int j = 0 ; j < list2.length ; j++) {
                resultarray[i + j] += list1[i] * list2[j] ;
                
            }
        }
        array[3] = new SingleLinkedList();
        SingleLinkedList result = array[3];
        for(int i = 0 ; i < resultarray.length ; i++) {
            result.addAtEnd(Integer.valueOf(resultarray[i])) ;
        }
        //System.out.println(Arrays.toString(resultarray)) ;
        return resultarray;
    }
    public static void isNotValid(char poly1, char poly2 )
    {
        if(poly1 - 'A' > 2 || poly2 - 'A' > 2 || poly1 - 'A' < 0 || poly2 - 'A' < 0)
        {
            System.out.println("Error") ;
            System.exit(0) ;
         }
        
      }

    public static int[] coeff_array(String str) {  // convert input to terms[] array
        
        if(str.compareTo("") == 0) {
            System.out.println("Error") ;
            System.exit(0) ;
        }
        
        String[] str_array = str.split(",") ;
        int[] coeff = new int[str_array.length] ;
        //list.clear();
        for (int i = 0 ; i < coeff.length ; i++) {
            coeff[i] = Integer.parseInt(str_array[i]) ;
        }
        return coeff ;

    }
    
    public static void main(String[] args) {

        Scanner input = new Scanner(System.in) ;
        //byte i = 0 ;
        
        boolean[] flags = {false , false , false} ;
        
        
       while(true) {
            
            if(!input.hasNextLine()) {
                break ;
            }
            //clearPolynomial('D');
            String operation = input.nextLine() ;

            if(operation.compareTo("set") == 0) {
                char c = input.nextLine().charAt(0) ;
                if(c == 'R') {c = 'D';}
                isNotValid(c, 'A');
                flags[(int)(c - 'A')] = true ;
                
                int[] terms = coeff_array(input.nextLine().replaceAll("\\[|\\]", "")) ;
                setPolynomial(c , terms) ;

            }else if(operation.compareTo("print") == 0) {
                char c = input.nextLine().charAt(0) ;
                if(c == 'R') {c = 'D';}
                isNotValid(c, 'A');
                if(!flags[(int)(c - 'A')]) {
                    System.out.println("Error") ;
                    System.exit(0) ;
                }
                
                System.out.println(print_poly(c)) ;

            }else if(operation.compareTo("add") == 0) {
                char c1 = input.nextLine().charAt(0) ;
                char c2 = input.nextLine().charAt(0) ;
                if(c1 == 'R') {c1 = 'D';}
                if(c2 == 'R') {c2 = 'D';}
                
                isNotValid(c1, c2);
                if(!(flags[(int)(c1 - 'A')] && flags[(int)(c2 - 'A')])) {
                    System.out.println("Error") ;
                    System.exit(0) ;
                }else{
                    add(c1,c2) ;
                    System.out.println(print_poly('D'));
                }
                break ;
               
            }else if(operation.compareTo("sub") == 0) {
                char c1 = input.nextLine().charAt(0) ;
                char c2 = input.nextLine().charAt(0) ;
                if(c1 == 'R') {c1 = 'D';}
                if(c2 == 'R') {c2 = 'D';}
                isNotValid(c1, c2);
                
                if(!(flags[(int)(c1 - 'A')] && flags[(int)(c2 - 'A')])) {
                    System.out.println("Error") ;
                    System.exit(0) ;
                }else {
                    subtract(c1, c2) ;
                    System.out.println(print_poly('D'));
                }
                break ;

            }else if(operation.compareTo("mult") == 0) {
                char c1 = input.nextLine().charAt(0) ;
                char c2 = input.nextLine().charAt(0) ;
                if(c1 == 'R') {c1 = 'D';}
                if(c2 == 'R') {c2 = 'D';}
                isNotValid(c1, c2);
                if(!(flags[(int)(c1 - 'A')] && flags[(int)(c2 - 'A')])) {
                    System.out.println("Error") ;
                    System.exit(0) ;
                } else {
                    multiply(c1,c2) ;
                    System.out.println(print_poly('D'));
                }
                break ;

            }else if(operation.compareTo("clear") == 0) {
                char c = input.nextLine().charAt(0) ;
                if(c == 'R') {c = 'D';}
                isNotValid(c, 'A');
                clearPolynomial(c) ;
                flags[(int)(c - 'A')] = false ;
                System.out.println("[]") ;
                
                //break ;

            }else if(operation.compareTo("eval") == 0) {
                char c = input.nextLine().charAt(0) ;
                if(c == 'R') {c = 'D';}
                isNotValid(c, 'A');
                if(!flags[(int)(c - 'A')]) {
                    System.out.println("Error") ;
                    System.exit(0) ;
                    
                }else{
                         System.out.println(evaluatePolynomial(c, input.nextInt())) ;

                   
                }
                break ;
            }
            else
            {
                System.out.println("Error") ;
                System.exit(0) ;
                
            }
        }
        //input.close() ;
    
    }
}